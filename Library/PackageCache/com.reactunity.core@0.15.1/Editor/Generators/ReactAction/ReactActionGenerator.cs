// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ReactUnity.Editor.Editor.Generators.ReactAction
{
    using System;
    using System.IO;
    using System.Text;
    using System.Linq;
    using System.Collections.Generic;
    using ReactUnity.Editor.Generators;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ReactActionGenerator : ReactActionGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 9 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((GeneratorHelpers)Session["Common"]).AutoGeneratedWarning));
            
            #line default
            #line hidden
            this.Write("\r\nusing System;\r\n\r\nnamespace ReactUnity.Helpers\r\n{\r\n");
            
            #line 14 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"

  for (int i = 0; i < 10; i++)
  {
            
            #line default
            #line hidden
            this.Write(@"    /// <summary>
    ///   A wrapper for the <see cref=""ReactUnity.Helpers.Callback"" /> class to provide convienient access to the
    ///   delegates and events in ReactUnity from both JavaScript and TypeScript as well as C# as normal events.
    /// </summary>
    /// <example>
    ///   <code language=""csharp"">
    ///     var callback = new ReactAction&lt;string&gt;();
    ///     var listener = (str) => Console.WriteLine(str);
    ///     callback += listener;
    ///     callback.Invoke(""It works! From C#"");
    ///     callback -= listener;
    ///   </code>
    /// </example>
    /// <example>
    ///   <code language=""js"">
    ///     useEffect(() => {
    ///       let unsubscribe = Global.Instance.Delegate.AddListener((str) => console.log(str));
    ///       Global.Instance.Delegate.Invoke(""It works! From TypeScript"");
    ///       return () => unsubscribe();
    ///     }, []);
    ///   </code>
    /// </example>
    public class ReactAction");
            
            #line 39 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        /// <summary>\r\n        ///   The underlying action.\r\n        ///" +
                    " </summary>\r\n        private Action");
            
            #line 44 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(@" _delegate { get; set; }

        /// <summary>
        ///   Adds the listener to the action, and returns a function that removes the listener. This method should be only called from React.
        /// </summary>
        [Obsolete(""This method should be only called from React. Use the typed AddListener method or += and -= operators."")]
        public Action AddListener(object callback)
        {
            var cb = Callback.From(callback);
            Action");
            
            #line 53 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" listener = null;\r\n            listener = (");
            
            #line 54 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInvokeArgs(i)));
            
            #line default
            #line hidden
            this.Write(") => {\r\n                if (cb.Destroyed) _delegate -= listener;\r\n               " +
                    " else cb.Call(");
            
            #line 56 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInvokeArgs(i)));
            
            #line default
            #line hidden
            this.Write(@");
            };
            _delegate += listener;
            return () => _delegate -= listener;
        }

        /// <summary>
        ///   Adds the listener to the action, and returns a function that removes the listener.
        /// </summary>
        public Action AddListener(Action");
            
            #line 65 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" listener)\r\n        {\r\n            _delegate += listener;\r\n            return () " +
                    "=> _delegate -= listener;\r\n        }\r\n\r\n        ///  <summary>\r\n        ///    I" +
                    "nvokes the action.\r\n        ///  </summary>\r\n        public void Invoke(");
            
            #line 74 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParameterArgs(i)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            _delegate?.Invoke(");
            
            #line 76 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInvokeArgs(i)));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        ///   Creates a new ReactAction f" +
                    "rom a callback.\r\n        /// </summary>\r\n        public static ReactAction");
            
            #line 82 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" operator +(ReactAction");
            
            #line 82 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" action, Action");
            
            #line 82 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" listener)\r\n        {\r\n            action._delegate += listener;\r\n            ret" +
                    "urn action;\r\n        }\r\n\r\n        /// <summary>\r\n        ///   Removes the liste" +
                    "ner from the action.\r\n        /// </summary>\r\n        public static ReactAction");
            
            #line 91 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" operator -(ReactAction");
            
            #line 91 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" action, Action");
            
            #line 91 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTemplateArgs(i)));
            
            #line default
            #line hidden
            this.Write(" listener)\r\n        {\r\n            action._delegate -= listener;\r\n            ret" +
                    "urn action;\r\n        }\r\n    }\r\n");
            
            #line 97 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"

  } // End of for loop

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 102 "S:\Work\Unity\reactunity\core\Editor\Generators\ReactAction\ReactActionGenerator.tt"

  private string[] types = new string[] { "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10" };
  private string[] args = new string[] { "arg1", "arg2", "arg3", "arg4", "arg5", "arg6", "arg7", "arg8", "arg9", "arg10" };

  private string GetTemplateArgs(int count)
  {
    if(count == 0) return "";
    return "<" + string.Join(", ", types.Take(count)) + ">";
  }

  private string GetParameterArgs(int count)
  {
    var list = new List<string>();
    for (int i = 0; i < count; i++)
    {
      list.Add(types[i] + " " + args[i]);
    }
    return string.Join(", ", list);
  }

  private string GetInvokeArgs(int count)
  {
    return string.Join(", ", args.Take(count));
  }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ReactActionGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
