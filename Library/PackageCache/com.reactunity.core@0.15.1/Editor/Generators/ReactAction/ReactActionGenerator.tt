<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ReactUnity.Editor.Generators"#>
<#=((GeneratorHelpers)Session["Common"]).AutoGeneratedWarning#>
using System;

namespace ReactUnity.Helpers
{
<#
  for (int i = 0; i < 10; i++)
  {#>
    /// <summary>
    ///   A wrapper for the <see cref="ReactUnity.Helpers.Callback" /> class to provide convienient access to the
    ///   delegates and events in ReactUnity from both JavaScript and TypeScript as well as C# as normal events.
    /// </summary>
    /// <example>
    ///   <code language="csharp">
    ///     var callback = new ReactAction&lt;string&gt;();
    ///     var listener = (str) => Console.WriteLine(str);
    ///     callback += listener;
    ///     callback.Invoke("It works! From C#");
    ///     callback -= listener;
    ///   </code>
    /// </example>
    /// <example>
    ///   <code language="js">
    ///     useEffect(() => {
    ///       let unsubscribe = Global.Instance.Delegate.AddListener((str) => console.log(str));
    ///       Global.Instance.Delegate.Invoke("It works! From TypeScript");
    ///       return () => unsubscribe();
    ///     }, []);
    ///   </code>
    /// </example>
    public class ReactAction<#=GetTemplateArgs(i)#>
    {
        /// <summary>
        ///   The underlying action.
        /// </summary>
        private Action<#=GetTemplateArgs(i)#> _delegate { get; set; }

        /// <summary>
        ///   Adds the listener to the action, and returns a function that removes the listener. This method should be only called from React.
        /// </summary>
        [Obsolete("This method should be only called from React. Use the typed AddListener method or += and -= operators.")]
        public Action AddListener(object callback)
        {
            var cb = Callback.From(callback);
            Action<#=GetTemplateArgs(i)#> listener = null;
            listener = (<#=GetInvokeArgs(i)#>) => {
                if (cb.Destroyed) _delegate -= listener;
                else cb.Call(<#=GetInvokeArgs(i)#>);
            };
            _delegate += listener;
            return () => _delegate -= listener;
        }

        /// <summary>
        ///   Adds the listener to the action, and returns a function that removes the listener.
        /// </summary>
        public Action AddListener(Action<#=GetTemplateArgs(i)#> listener)
        {
            _delegate += listener;
            return () => _delegate -= listener;
        }

        ///  <summary>
        ///    Invokes the action.
        ///  </summary>
        public void Invoke(<#=GetParameterArgs(i)#>)
        {
            _delegate?.Invoke(<#=GetInvokeArgs(i)#>);
        }

        /// <summary>
        ///   Creates a new ReactAction from a callback.
        /// </summary>
        public static ReactAction<#=GetTemplateArgs(i)#> operator +(ReactAction<#=GetTemplateArgs(i)#> action, Action<#=GetTemplateArgs(i)#> listener)
        {
            action._delegate += listener;
            return action;
        }

        /// <summary>
        ///   Removes the listener from the action.
        /// </summary>
        public static ReactAction<#=GetTemplateArgs(i)#> operator -(ReactAction<#=GetTemplateArgs(i)#> action, Action<#=GetTemplateArgs(i)#> listener)
        {
            action._delegate -= listener;
            return action;
        }
    }
<#
  } // End of for loop
#>
}

<#+
  private string[] types = new string[] { "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10" };
  private string[] args = new string[] { "arg1", "arg2", "arg3", "arg4", "arg5", "arg6", "arg7", "arg8", "arg9", "arg10" };

  private string GetTemplateArgs(int count)
  {
    if(count == 0) return "";
    return "<" + string.Join(", ", types.Take(count)) + ">";
  }

  private string GetParameterArgs(int count)
  {
    var list = new List<string>();
    for (int i = 0; i < count; i++)
    {
      list.Add(types[i] + " " + args[i]);
    }
    return string.Join(", ", list);
  }

  private string GetInvokeArgs(int count)
  {
    return string.Join(", ", args.Take(count));
  }
#>
